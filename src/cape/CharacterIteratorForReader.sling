
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is CharacterDecoder:

var reader as Reader
var buffer as buffer = null
var bufferStart as long = -1
var bufferSize as long = 0
var bufferDataSize as long = 0
var currentPos as long = -1
var readPos as long = 0

ctor(reader as Reader)
{
	this.reader = reader
	this.buffer = MALLOC(1024)
	this.bufferSize = 1024
}

ctor(reader as Reader, bufferSize as long)
{
	this.reader = reader
	this.buffer = MALLOC(bufferSize)
	this.bufferSize = bufferSize
}

func makeDataAvailable(n as long) private as bool
{
	if(n >= bufferStart && n < bufferStart + bufferDataSize) {
		return(true)
	}
	if(reader is SeekableReader) {
		var block = n / bufferSize
		var blockPos = block * bufferSize
		if(readPos != blockPos) {
			if((reader as! SeekableReader).setCurrentPosition(blockPos) == false) {
				return(false)
			}
			readPos = blockPos
		}
	}
	bufferDataSize = reader.read(buffer)
	bufferStart = readPos
	readPos += bufferDataSize
	if(n >= bufferStart && n < bufferStart + bufferDataSize) {
		return(true)
	}
	return(false)
}

func moveToPreviousByte override as bool
{
	if(makeDataAvailable(currentPos - 1) == false) {
		return(false)
	}
	currentPos --
	return(true)
}

func moveToNextByte override as bool
{
	if(makeDataAvailable(currentPos + 1) == false) {
		return(false)
	}
	currentPos ++
	return(true)
}

func getCurrentByte override as int
{
	return(Buffer.getByte(buffer, currentPos - bufferStart))
}
