
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func forPath(path as string) static as File
{
	if(path == null || String.getLength(path) < 1) {
		return(new FileInvalid())
	}
	IFDEF("target_android") {
		return(FileForAndroid.forPath(path))
	}
	ELSE IFDEF("target_netx") {
		return(FileForDotNet.forPath(path))
	}
	ELSE IFDEF("target_j2se") {
		return(FileForJava.forPath(path))
	}
	ELSE IFDEF("target_objc") {
		return(FileForObjC.forPath(path))
	}
	ELSE {
		ERROR("Not implemented.")
		return(new FileInvalid())
	}
}

func forRelativePath(path as string, relativeTo as File) static as File
{
	if(relativeTo == null) {
		return(forPath(path))
	}
	if(path == null) {
		return(new FileInvalid())
	}
	if(Environment.isAbsolutePath(path)) {
		return(forPath(path))
	}
	var sep = Environment.getPathSeparator()
	// Trick here: This way we can support forward slashes even on Windows
	if(sep != '/') {
		if(String.indexOf(path, sep) < 0 && String.indexOf(path, '/') >= 0) {
			sep = '/'
		}
	}
	var f = relativeTo
	var comps = String.split(path, sep)
	foreach(comp in comps) {
		if(String.isEmpty(comp)) {
			continue
		}
		f = f.entry(comp)
	}
	return(f)
}
