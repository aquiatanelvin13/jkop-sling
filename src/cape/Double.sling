
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

class MyDoubleObject is DoubleObject private
{
	prop value as double

	func toDouble as double
	{
		return(value)
	}
}

func asObject(value as double) static as DoubleObject
{
	var v = new MyDoubleObject()
	v.setValue(value)
	return(v)
}

func asDouble(obj as object) static as double
{
	if(obj == null) {
		return(0.0)
	}
	if(obj is DoubleObject) {
		return((obj as! DoubleObject).toDouble())
	}
	if(obj is IntegerObject) {
		return((obj as! IntegerObject).toInteger() as double)
	}
	if(obj is string) {
		return(String.toDouble(obj as! string))
	}
	if(obj is StringObject) {
		return(String.toDouble((obj as! StringObject).toString()))
	}
	if(obj is BooleanObject) {
		if((obj as! BooleanObject).toBoolean()) {
			return(1.0)
		}
		return(0.0)
	}
	if(obj is CharacterObject) {
		return((obj as! CharacterObject).toCharacter() as double)
	}
	return(0.0)
}
