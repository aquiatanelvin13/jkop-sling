
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func forFile(file as File, params as array<string> = null) static as this
{
	var v = new this()
	v.setFile(file)
	foreach(param in params) {
		v.addParam(param)
	}
	return(v)
}

func forCommand(command as string, params as array<string> = null) static as this
{
	var v = new this()
	v.setCommand(command)
	foreach(param in params) {
		v.addParam(param)
	}
	return(v)
}

func forString(str as string) static as this
{
	var v = new this()
	var arr = String.quotedStringToVector(str, ' ')
	if(arr != null && Vector.getSize(arr) > 0) {
		v.setCommand(arr[0])
		Vector.remove(arr, 0)
		v.setParams(arr)
	}
	return(v)
}

prop command as string
prop file as File
prop params as vector<string>
prop env as map<string,string>
prop cwd as File
prop uid as int = -1
prop gid as int = -1
prop pipeHandler as BufferDataReceiver
prop trapSigint as bool = true
prop replaceSelf as bool = false
prop pipePty as bool = false
prop startGroup as bool = false
prop noCmdWindow as bool = false
prop errorBuffer as StringBuilder

ctor
{
	params = new vector<string>
	env = new map<string,string>
}

func appendProperParam(sb as StringBuilder, p as string) private
{
	var noQuotes = false
	if(OS.isWindows()) {
		var rc = String.lastIndexOf(p, ' ')
		if(rc < 0) {
			noQuotes = true
		}
	}
	sb.append(' ')
	if(noQuotes) {
		sb.append(p)
	}
	else {
		sb.append('"')
		sb.append(p)
		sb.append('"')
	}
}

func toString(includeEnv as bool = true) as string
{
	var sb = new StringBuilder()
	if(includeEnv) {
		var keys as vector<string> = Map.getKeys(env)
		foreach(key in keys) {
			sb.append(key)
			sb.append("=")
			sb.append(env[key])
			sb.append(" ")
		}
	}
	if(file != null) {
		sb.append("\"")
		sb.append(file.getPath())
		sb.append("\"")
	}
	else {
		sb.append("\"")
		sb.append(command)
		sb.append("\"")
	}
	foreach(p in params) {
		appendProperParam(sb, p)
	}
	return(sb.toString())
}

func addParam(arg as string)
{
	if(arg != null) {
		if(params == null) {
			params = new vector<string>
		}
		params += arg
	}
}

func addParam(file as File)
{
	if(file != null) {
		addParam(file.getPath())
	}
}

func addParams(params as vector<string>)
{
	foreach(s in params) {
		addParam(s)
	}
}

func setEnvVariable(key as string, val as string)
{
	if(key != null) {
		if(env == null) {
			env = new map<string,string>
		}
		env[key] = val
	}
}

func start as Process
{
	return(startProcess(false, null, pipeHandler))
}

func execute(listener as ProcessLauncherListener = null) as int
{
	var cp = startProcess(true, listener, pipeHandler)
	if(cp == null) {
		return(-1)
	}
	return(cp.getExitStatus())
}

class MyStringPipeHandler is BufferDataReceiver
{
	prop builder as StringBuilder
	prop encoding as string

	ctor
	{
		encoding = "UTF-8"
	}

	func onBufferData(data as buffer, size as long)
	{
		if(builder == null || data == null || size < 1) {
			return
		}
		var str = String.forBuffer(Buffer.getSubBuffer(data, 0, size), encoding)
		if(str == null) {
			return
		}
		builder.append(str)
	}
}

class QuietPipeHandler is BufferDataReceiver
{
	func onBufferData(data as buffer, size as long)
	{
	}
}

func disableOutput
{
	setPipeHandler(new QuietPipeHandler())
}

func executeToStringBuilder(output as StringBuilder) as int
{
	var msp = new MyStringPipeHandler()
	msp.setBuilder(output)
	var cp = startProcess(true, null, msp)
	if(cp == null) {
		return(-1)
	}
	return(cp.getExitStatus())
}

func executeToString as string
{
	var sb = new StringBuilder()
	if(executeToStringBuilder(sb) < 0) {
		return(null)
	}
	return(sb.toString())
}

func startProcess(wait as bool, listener as ProcessLauncherListener, pipeHandler as BufferDataReceiver) private as Process
{
	IFDEF("target_netx") {
		return(ProcessLauncherNetX.startProcess(this, wait, listener, pipeHandler, errorBuffer))
	}
	IFDEF("target_java") {
		return(ProcessLauncherJava.startProcess(this, wait, listener, pipeHandler))
	}
	ELSE {
		ERROR("Not implemented")
		return(null)
	}
}

/* FIXME: executeToBuffer
class MyBufferPipeHandler : BufferPipeHandler {
	property DynamicBuffer dest
	public void on_pipe_buffer(Buffer buf) {
		if(dest != null) {
			DynamicBuffer.cat(dest, buf)
		}
	}
}

public int execute_to_buffer(DynamicBuffer output, Logger logger = null) {
	var msp = new MyBufferPipeHandler().set_dest(output)
	var bph = get_buffer_pipe_handler()
	var sph = get_string_pipe_handler()
	set_buffer_pipe_handler(msp)
	set_string_pipe_handler(null)
	var cp = ProcessLauncherBackend.start_process(this, true, null, logger)
	set_buffer_pipe_handler(bph)
	set_string_pipe_handler(sph)
	if(cp == null) {
		return(-1)
	}
	return(cp.get_exit_status())
}
*/