
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func parse(buffer as buffer) static as object
{
	if(buffer == null) {
		return(null)
	}
	return(new this(String.forUTF8Buffer(buffer)).acceptObject())
}

func parse(str as string) static as object
{
	if(String.isEmpty(str)) {
		return(null)
	}
	return(new this(str).acceptObject())
}

var iterator as CharacterIterator

ctor(str as string) private
{
	iterator = new CharacterIteratorForString(str)
	iterator.moveToNextChar()
}

func skipSpaces private
{
	while(true) {
		if(iterator.hasEnded()) {
			break
		}
		var c = iterator.getCurrentChar()
		if(c == ' ' || c == '\t' || c == '\r' || c == '\n') {
			iterator.moveToNextChar()
			continue
		}
		break
	}
}

func acceptChar(c as char) private as bool
{
	skipSpaces()
	if(iterator.getCurrentChar() == c) {
		iterator.moveToNextChar()
		return(true)
	}
	return(false)
}

func acceptString private as string
{
	skipSpaces()
	var ss = iterator.getCurrentChar()
	if(ss != '\'' && ss != '"') {
		return(null)
	}
	var sb = new StringBuilder()
	while(true) {
		var c = iterator.getNextChar()
		if(c == ss) {
			iterator.moveToNextChar()
			break
		}
		if(c == '\\') {
			c = iterator.getNextChar()
		}
		sb.append(c)
	}
	return(sb.toString())
}

func acceptObject private as object
{
	if(acceptChar('[')) {
		var v = new DynamicVector()
		while(true) {
			if(acceptChar(']')) {
				break
			}
			var o = acceptObject()
			if(o == null) {
				return(null)
			}
			v.append(o)
			acceptChar(',')
		}
		return(v)
	}
	if(acceptChar('{')) {
		var v = new DynamicMap()
		while(true) {
			if(acceptChar('}')) {
				break
			}
			var key = acceptString()
			if(key == null) {
				return(null)
			}
			if(acceptChar(':') == false) {
				return(null)
			}
			var val = acceptObject()
			if(val == null) {
				return(null)
			}
			v.set(key, val)
			acceptChar(',')
		}
		return(v)
	}
	var s = acceptString()
	if(s != null) {
		return(s)
	}
	return(null)
}
