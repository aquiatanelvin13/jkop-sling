
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is ZipWriter:

prop file as File;
var zip as ptr;

lang "c" {{{
	#include <string.h>
	#define MINIZ_HEADER_FILE_ONLY
	#include "miniz.c"
}}}

dtor
{
	close();
}

func initialize as this
{
	if(file == null || file.exists()) {
		return(null);
	}
	var filename = file.getPath();
	if(filename == null) {
		return(null);
	}
	var zp as ptr;
	lang "c" {{{
		mz_zip_archive* zipp = (mz_zip_archive*)malloc(sizeof(mz_zip_archive));
		zp = zipp;
	}}}
	if(zp == null) {
		return(null);
	}
	var err = false;
	lang "c" {{{
		memset(zipp, 0, sizeof(mz_zip_archive));
		if(mz_zip_writer_init_file(zipp, fns, 0) == MZ_FALSE) {
			err = MZ_TRUE;
		}
	}}}
	if(err) {
		lang "c" {{{
			free(zipp);
		}}}
		return(null);
	}
	this.zip = zp;
	return(this);
}

func addFile(file as File, afilenemae as string) as bool
{
	if(zip == null || file == null || String.isEmpty(afilename)) {
		return(false);
	}
	var fs = file.stat();
	if(fs.isFile() == false && fs.isDirectory() == false) {
		return(false);
	}
	var filename = String.replace(afilename, '\\', '/');
	var fn = file.getPath();
	if(fn == null) {
		return(false);
	}
	if(fs.isDirectory() && String.startsWith(filename, "/") == false) {
		filename = filename .. "/";
	}
	var zp = zip;
	var err = false;
	if(fs.isFile()) {
		lang "c" {{{
			if(mz_zip_writer_add_file((mz_zip_archive*)zp, filename, fn, NULL, 0, MZ_DEFAULT_COMPRESSION) == MZ_FALSE) {
				err = MZ_TRUE;
			}
		}}}
	}
	else if(fs.isDirectory()) {
		lang "c" {{{
			if(mz_zip_writer_add_mem((mz_zip_archive*)zp, filename, NULL, 0, MZ_DEFAULT_COMPRESSION) == MZ_FALSE) {
				err = MZ_TRUE;
			}
		}}}
	}
	else {
		err = true;
	}
	return(!err);
}

func close as bool
{
	var zp = zip;
	if(zp == null) {
		return(true);
	}
	this.zip = null;
	var err = false;
	lang "c" {{{
		if(mz_zip_writer_finalize_archive((mz_zip_archive*)zp) == MZ_FALSE) {
			err = MZ_TRUE;
		}
		if(mz_zip_writer_end((mz_zip_archive*)zp) == MZ_FALSE) {
			err = MZ_TRUE;
		}
		free(zp);
	}}}
	return(!err);
}
