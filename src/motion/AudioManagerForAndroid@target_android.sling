
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is AudioManager imports cape:

class MyAudioClip is AudioClip is Runnable
{
	prop soundPool as !"android.media.SoundPool"
	prop soundId as int

	func run
	{
		var sid as int
		lang "java" {{{
			sid = soundPool.play(soundId, 1, 1, 0, 0, 1);
		}}}
	}

	func play as bool
	{
		return(Thread.start(this))
	}
}

func forApplication(context as AndroidApplicationContext) static as this
{
	if(context == null) {
		return(null)
	}
	var v = new this()
	v.setContext(context)
	return(v)
}

prop context as AndroidApplicationContext
var soundPool as !"android.media.SoundPool"

ctor
{
	lang "java" {{{
		soundPool = new android.media.SoundPool(128, android.media.AudioManager.STREAM_MUSIC, 0);
	}}}
}

func sanitizeResourceName(n as string) private as string
{
	if(n == null) {
		return(null);
	}
	var sb = new StringBuilder()
	var it = String.iterate(n)
	var c as char
	while((c = it.getNextChar()) > 0) {
		if(c >= 'A' && c <= 'Z') {
			sb.append(('a' + c - 'A') as char)
		}
		else if(c >= 'a' && c <= 'z') {
			sb.append(c);
		}
		else if(c >= '0' && c <= '9') {
			sb.append(c);
		}
		else {
			sb.append('_');
		}
	}
	return(sb.toString());
}

func getClipForResource(id as string) override as AudioClip
{
	if(String.isEmpty(id)) {
		return(null)
	}
	var activityContext = context.getAndroidActivityContext()
	if(activityContext == null) {
		return(null)
	}
	var soundId as int = -1
	var rid #used = (activityContext.getPackageName() as! string) .. ":raw/" .. sanitizeResourceName(id)
	lang "java" {{{
		android.content.res.Resources res = activityContext.getResources();
		if(res != null) {
			int aid = res.getIdentifier(rid, null, null);
			if(aid > 0) {
				soundId = soundPool.load(activityContext, aid, 1);
			}
		}
	}}}
	if(soundId < 0) {
		return(null)
	}
	var v = new MyAudioClip()
	v.setSoundPool(soundPool)
	v.setSoundId(soundId)
	return(v)
}
